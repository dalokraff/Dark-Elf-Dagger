local mod = get_mod("Dark Elf Dagger")

Managers.package:load("units/weapons/player/wpn_empire_handgun_02_t2/wpn_empire_handgun_02_t2_3p", "global")
Managers.package:load("units/weapons/player/wpn_empire_handgun_02_t2/wpn_empire_handgun_02_t2", "global")

Managers.package:load("units/weapons/player/wpn_emp_sword_02_t1/wpn_emp_sword_02_t1_3p", "global")
Managers.package:load("units/weapons/player/wpn_emp_sword_02_t1/wpn_emp_sword_02_t1", "global")

Managers.package:load("units/weapons/player/wpn_we_dagger_01_t1/wpn_we_dagger_01_t1_runed_01", "global")
Managers.package:load("units/weapons/player/wpn_we_dagger_01_t1/wpn_we_dagger_01_t1_runed_01_3p", "global")

mod:dofile("scripts/mods/Dark Elf Dagger/hooks")

-- Your mod code goes here.
-- https://vmf-docs.verminti.de

local tisch = {
	{
		name = "dagger",
		path = "units/pDagger/pDagger",
		path_3p = "units/pDagger/pDagger_3p",
		--path = "units/BeiZhou2H",
		--path_3p = "units/BeiZhou2H_3p",
		swap_skin = "we_dual_dagger_skin_02",
		swap_hand = "right_hand_unit",
		swap_hand2 = "left_hand_unit",
		wpn_path = "units/weapons/player/wpn_we_dagger_01_t2/wpn_we_dagger_01_t2",
		wpn_path_3p = "units/weapons/player/wpn_we_dagger_01_t2/wpn_we_dagger_01_t2_3p"
	},
	{
		name = "dagger",
		path = "units/pDagger/pDagger",
		path_3p = "units/pDagger/pDagger_3p",
		--path = "units/BeiZhou2H",
		--path_3p = "units/BeiZhou2H_3p",
		swap_skin = "we_dual_dagger_skin_02",
		swap_hand = "right_hand_unit",
		swap_hand2 = "left_hand_unit",
		wpn_path = "units/weapons/player/wpn_we_dagger_01_t2/wpn_we_dagger_01_t2",
		wpn_path_3p = "units/weapons/player/wpn_we_dagger_01_t2/wpn_we_dagger_01_t2_3p"
	}

    {
		name = "sword",
		path = "units/pDagger/pSword",
		path_3p = "units/pDagger/pSword_3p",
		--path = "units/BeiZhou2H",
		--path_3p = "units/BeiZhou2H_3p",
		swap_skin = "we_dual_sword_skin_02",
		swap_hand = "right_hand_unit",
		swap_hand2 = "left_hand_unit",
		wpn_path = "units/weapons/player/wpn_we_sword_01_t2/wpn_we_sword_01_t2",
		wpn_path_3p = "units/weapons/player/wpn_we_sword_01_t2/wpn_we_sword_01_t2_3p"
	},
	{
		name = "sword",
		path = "units/pDagger/pSword",
		path_3p = "units/pDagger/pSword_3p",
		--path = "units/BeiZhou2H",
		--path_3p = "units/BeiZhou2H_3p",
		swap_skin = "we_dual_sword_skin_02",
		swap_hand = "right_hand_unit",
		swap_hand2 = "left_hand_unit",
		wpn_path = "units/weapons/player/wpn_we_sword_01_t2/wpn_we_sword_01_t2",
		wpn_path_3p = "units/weapons/player/wpn_we_sword_01_t2/wpn_we_sword_01_t2_3p"
	}
}

for i=1, #tisch do 
		
	NetworkLookup.inventory_packages[tisch[i].path_3p] = NetworkLookup.inventory_packages[tisch[i].wpn_path_3p]
	NetworkLookup.inventory_packages[NetworkLookup.inventory_packages[tisch[i].wpn_path_3p]] = tisch[i].path_3p
	NetworkLookup.inventory_packages[tisch[i].path] = NetworkLookup.inventory_packages[tisch[i].wpn_path]
	NetworkLookup.inventory_packages[NetworkLookup.inventory_packages[tisch[i].wpn_path]] = tisch[i].path
end

mod:hook(PackageManager, "load",
         function(func, self, package_name, reference_name, callback,
                  asynchronous, prioritize)
    if package_name ~= tisch[1].path and package_name ~= tisch[1].path.."_3p" then
        func(self, package_name, reference_name, callback, asynchronous,
             prioritize)
    end
	
end)

mod:hook(PackageManager, "unload",
         function(func, self, package_name, reference_name)
    if package_name ~= tisch[1].path and package_name ~= tisch[1].path.."_3p" then
        func(self, package_name, reference_name)
    end
	
end)

mod:hook(PackageManager, "has_loaded",
         function(func, self, package, reference_name)
    if (package == tisch[1].path or package == tisch[1].path.."_3p") then
        return true
    end
	
    return func(self, package, reference_name)
end)


local function spawn_package_to_player (package_name)
	local player = Managers.player:local_player()
	local world = Managers.world:world("level_world")
  
	if world and player and player.player_unit then
	  local player_unit = player.player_unit
  
	  local position = Unit.local_position(player_unit, 0) + Vector3(0, 0, 1)
	  local rotation = Unit.local_rotation(player_unit, 0)
	  local unit = World.spawn_unit(world, package_name, position, rotation)
  
	  mod:chat_broadcast(#NetworkLookup.inventory_packages + 1)
	  return unit
	end
  
	return nil
end

mod:command("spawn_dagger", "", function()
    local unit = spawn_package_to_player("units/pDagger/pDagger_3p")
    replace_textures(unit)
end)




mod.on_enabled = function()
    
    for i=1, #tisch do
    	NetworkLookup.inventory_packages[tisch[i].path_3p] = NetworkLookup.inventory_packages[tisch[i].wpn_path_3p]
    	NetworkLookup.inventory_packages[NetworkLookup.inventory_packages[tisch[i].wpn_path_3p]] = tisch[i].path_3p
    	NetworkLookup.inventory_packages[tisch[i].path] = NetworkLookup.inventory_packages[tisch[i].wpn_path]
    	NetworkLookup.inventory_packages[NetworkLookup.inventory_packages[tisch[i].wpn_path]] = tisch[i].path
        WeaponSkins.skins[tisch[i].swap_skin][tisch[i].swap_hand] = tisch[i].path
        WeaponSkins.skins[tisch[i].swap_skin][tisch[i].swap_hand2] = tisch[i].path
    end
    
    
    
    local player = Managers.player:local_player()
    local player_unit = player.player_unit    
    local inventory_extension = ScriptUnit.extension(player_unit, "inventory_system")
    local career_extension = ScriptUnit.extension(player_unit, "career_system")
    local career_name = career_extension:career_name()
    local item_one = BackendUtils.get_loadout_item(career_name, "slot_melee")
    local item_two = BackendUtils.get_loadout_item(career_name, "slot_ranged")
        
if (item_one.skin == 'we_dual_dagger_skin_02') or (item_two.skin == 'we_dual_dagger_skin_02') then
        BackendUtils.set_loadout_item(item_two.backend_id, career_name, "slot_ranged")
        inventory_extension:create_equipment_in_slot("slot_ranged", item_two.backend_id)
        BackendUtils.set_loadout_item(item_one.backend_id, career_name, "slot_melee")
        inventory_extension:create_equipment_in_slot("slot_melee", item_one.backend_id)
    end
    
end

mod.on_disabled = function()
    
    for i=1, #tisch do
	NetworkLookup.inventory_packages[tisch[i].wpn_path_3p] = NetworkLookup.inventory_packages[tisch[i].path_3p]
	NetworkLookup.inventory_packages[NetworkLookup.inventory_packages[tisch[i].path_3p]] = tisch[i].wpn_path_3p
	NetworkLookup.inventory_packages[tisch[i].wpn_path] = NetworkLookup.inventory_packages[tisch[i].path]
	NetworkLookup.inventory_packages[NetworkLookup.inventory_packages[tisch[i].path]] = tisch[i].wpn_path
        WeaponSkins.skins[tisch[i].swap_skin][tisch[i].swap_hand] = tisch[i].wpn_path
        WeaponSkins.skins[tisch[i].swap_skin][tisch[i].swap_hand2] = tisch[i].wpn_path
    end
    
    
    local player = Managers.player:local_player()
    local player_unit = player.player_unit    
    local inventory_extension = ScriptUnit.extension(player_unit, "inventory_system")
    local career_extension = ScriptUnit.extension(player_unit, "career_system")
    local career_name = career_extension:career_name()
    local item_one = BackendUtils.get_loadout_item(career_name, "slot_melee")
    local item_two = BackendUtils.get_loadout_item(career_name, "slot_ranged")
        
if (item_one.skin == 'we_dual_dagger_skin_02') or (item_two.skin == 'we_dual_dagger_skin_02') then
        BackendUtils.set_loadout_item(item_two.backend_id, career_name, "slot_ranged")
        inventory_extension:create_equipment_in_slot("slot_ranged", item_two.backend_id)
        BackendUtils.set_loadout_item(item_one.backend_id, career_name, "slot_melee")
        inventory_extension:create_equipment_in_slot("slot_melee", item_one.backend_id)
    end
end